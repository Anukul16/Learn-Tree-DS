/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 class Solution{
    public TreeNode sortedListToBST(ListNode head){
        if(head==null)return null;
        if(head.next == null) return new TreeNode(head.val);
        ListNode slow=head,fast=head,prev=null;
        while(fast!=null && fast.next!=null){
            prev=slow;
            slow=slow.next;
            fast=fast.next.next;
        }
        prev.next=null;
        TreeNode root=new TreeNode(slow.val);
        root.left=sortedListToBST(head);
        root.right=sortedListToBST(slow.next);
        return root;
    }
 }
// class Solution {
//     public TreeNode sortedListToBST(ListNode head) {
//         if(head==null)return null;
//         ListNode curr=head;
//         int count=0;
//         while(curr!=null){
//             count++;
//             curr=curr.next;
//         }
//         curr=head;
//         int nums[]=new int[count];
//         int idx=0;
//         while(curr!=null){
//             nums[idx++]=curr.val;
//             curr=curr.next;
//         }
//     return bst(nums,0,nums.length-1);
//     }
//     private TreeNode bst(int[]nums,int left,int right)
//     {
//         if(left>right)return null;
//         int mid=left+(right-left)/2;
//         TreeNode root=new TreeNode(nums[mid]);
//         root.left=bst(nums,left,mid-1);
//         root.right=bst(nums,mid+1,right);
//         return root;
//     }
// }
