/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer>ans=new ArrayList<>();
        dfs(root,0,ans);
        return ans;
    }
    void dfs(TreeNode root,int depth,List<Integer>ans){
        if(root==null)return;
        if(ans.size()==depth)ans.add(root.val);
        dfs(root.right,depth+1,ans);
        dfs(root.left,depth+1,ans);
    }
}
//     public List<Integer> rightSideView(TreeNode root) {
//         List<Integer>ans=new ArrayList<>();
//         Queue<TreeNode>queue=new LinkedList<>();
//         if(root==null)return ans;
//         queue.add(root);
//         while(!queue.isEmpty()){
//             int size=queue.size();
//             List<Integer>temp=new ArrayList<>();
//             for(int i=0;i<size;i++){
//                 if(queue.peek().left!=null)queue.add(queue.peek().left);
//                 if(queue.peek().right!=null)queue.add(queue.peek().right);
//                 temp.add(queue.poll().val);
//             }
//             ans.add(temp.get(temp.size()-1));
//         }
//         return ans;
//     }
// }
