class Node  
{ 
    int data; 
    Node left, right; 
   
    public Node(int d)  
    { 
        data = d; 
        left = right = null; 
    } 
}

class Solution
{
    boolean isLeafNode(Node node){
        return (node.left==null) && (node.right==null);
    }
    void addLeftBoundary(Node root,ArrayList<Integer>ans){
        Node curr=root.left;
        while(curr!=null){
            if(isLeafNode(curr)==false)ans.add(curr.data);
            if(curr.left!=null)curr=curr.left;
            else curr=curr.right;
        }
    }
    void addLeafNodes(Node root,ArrayList<Integer>ans){
        if(isLeafNode(root)==true){
            ans.add(root.data);
            return;
        }
        if(root.left!=null)addLeafNodes(root.left,ans);
        if(root.right!=null)addLeafNodes(root.right,ans);
    }
    void addRightBoundary(Node root,ArrayList<Integer>ans){
        Node curr=root.right;
        ArrayList<Integer>list=new ArrayList<>();
        while(curr!=null){
            if(isLeafNode(curr)==false)list.add(curr.data);
            if(curr.right!=null)curr=curr.right;
            else curr=curr.left;
        }
        int it;
        for(it=list.size()-1;it>=0;it--){
            ans.add(list.get(it));
        }
    }
	ArrayList <Integer> boundary(Node node)
	{
	    ArrayList<Integer>ans=new ArrayList<>();
	    if(isLeafNode(node)==false)ans.add(node.data);
	    addLeftBoundary(node,ans);
	    addLeafNodes(node,ans);
	    addRightBoundary(node,ans);
	    return ans;
	}
}
